{"version":3,"sources":["galleria.picasa.js"],"names":["$","Galleria","requires","PATH","utils","getScriptPath","Picasa","this","options","max","imageSize","thumbSize","complete","prototype","constructor","search","phrase","callback","_call","q","user","username","useralbum","album","setOptions","extend","type","url","params","self","kind","access","max-results","thumbsize","_getSizes","join","alt","each","key","value","data","wait","until","success","_parse","call","feed","entry","error","msg","raise","timeout","getJSON","result","norm","small","thumb","medium","big","original","op","t","n","sz","parseValue","i","gallery","img","media$group","media$thumbnail","push","image","title","summary","$t","load","arguments","length","_options","picasa","apply","array","args","split","p","opts","picasaOptions","loader","css","width","height","opacity","background","window","setTimeout","append","arg","_data","remove","trigger","DATA","jQuery"],"mappings":"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","file":"galleria.picasa.js","sourcesContent":["/**\n * Galleria Picasa Plugin 2016-09-03\n * http://galleria.io\n *\n * Copyright (c) 2010 - 2017 worse is better UG\n * Licensed under the MIT license\n * https://raw.github.com/worseisbetter/galleria/master/LICENSE\n *\n */\n\n(function($) {\n\n/*global jQuery, Galleria, window */\n\nGalleria.requires(1.25, 'The Picasa Plugin requires Galleria version 1.2.5 or later.');\n\n// The script path\nvar PATH = Galleria.utils.getScriptPath();\n\n/**\n\n    @class\n    @constructor\n\n    @example var picasa = new Galleria.Picasa();\n\n    @author http://wib.io\n\n    @requires jQuery\n    @requires Galleria\n\n    @returns Instance\n*/\n\nGalleria.Picasa = function() {\n\n    this.options = {\n        max: 30,                       // photos to return\n        imageSize: 'medium',           // photo size ( thumb,small,medium,big,original ) or a number\n        thumbSize: 'thumb',            // thumbnail size ( thumb,small,medium,big,original ) or a number\n        complete: function(){}         // callback to be called inside the Galleria.prototype.load\n    };\n\n};\n\nGalleria.Picasa.prototype = {\n\n    // bring back the constructor reference\n\n    constructor: Galleria.Picasa,\n\n    /**\n        Search for anything at Picasa\n\n        @param {String} phrase The string to search for\n        @param {Function} [callback] The callback to be called when the data is ready\n\n        @returns Instance\n    */\n\n    search: function( phrase, callback ) {\n        return this._call( 'search', 'all', {\n            q: phrase\n        }, callback );\n    },\n\n    /**\n        Get a user's public photos\n\n        @param {String} username The username to fetch photos from\n        @param {Function} [callback] The callback to be called when the data is ready\n\n        @returns Instance\n    */\n\n    user: function( username, callback ) {\n        return this._call( 'user', 'user/' + username, callback );\n    },\n\n    /**\n        Get photos from an album\n\n        @param {String} username The username that owns the album\n        @param {String} album The album ID\n        @param {Function} [callback] The callback to be called when the data is ready\n\n        @returns Instance\n    */\n\n    useralbum: function( username, album, callback ) {\n        return this._call( 'useralbum', 'user/' + username + '/album/' + album, callback );\n    },\n\n    /**\n        Set picasa options\n\n        @param {Object} options The options object to blend\n\n        @returns Instance\n    */\n\n    setOptions: function( options ) {\n        $.extend(this.options, options);\n        return this;\n    },\n\n\n    // call Picasa\n\n    _call: function( type, url, params, callback ) {\n\n        url = 'https://picasaweb.google.com/data/feed/api/' + url + '?';\n\n        if (typeof params == 'function') {\n            callback = params;\n            params = {};\n        }\n\n        var self = this;\n\n        params = $.extend({\n            'kind': 'photo',\n            'access': 'public',\n            'max-results': this.options.max,\n            'thumbsize': this._getSizes().join(','),\n            'alt': 'json-in-script',\n            'callback': '?'\n        }, params );\n\n        $.each(params, function( key, value ) {\n            url += '&' + key + '=' + value;\n        });\n\n        // since Picasa throws 404 when the call is malformed, we must set a timeout here:\n\n        var data = false;\n\n        Galleria.utils.wait({\n            until: function() {\n                return data;\n            },\n            success: function() {\n                self._parse.call( self, data.feed.entry, callback );\n            },\n            error: function() {\n                var msg = '';\n                if ( type == 'user' ) {\n                    msg = 'user not found.';\n                } else if ( type == 'useralbum' ) {\n                    msg = 'album or user not found.';\n                }\n                Galleria.raise('Picasa request failed' + (msg ? ': ' + msg : '.'));\n            },\n            timeout: 5000\n        });\n\n        $.getJSON( url, function( result ) {\n            data = result;\n        });\n\n        return self;\n    },\n\n\n    // parse image sizes and return an array of three\n\n    _getSizes: function() {\n\n        var self = this,\n            norm = {\n                small: '72c',\n                thumb: '104u',\n                medium: '640u',\n                big: '1024u',\n                original: '1600u'\n            },\n            op = self.options,\n            t = {},\n            n,\n            sz = [32,48,64,72,94,104,110,128,144,150,160,200,220,288,320,400,512,576,640,720,800,912,1024,1152,1280,1440,1600];\n\n        $(['thumbSize', 'imageSize']).each(function() {\n            if( op[this] in norm ) {\n                t[this] = norm[ op[this] ];\n            } else {\n                n = Galleria.utils.parseValue( op[this] );\n                if (n > 1600) {\n                    n = 1600;\n                } else {\n                    $.each( sz, function(i) {\n                        if ( n < this ) {\n                            n = sz[i-1];\n                            return false;\n                        }\n                    });\n                }\n                t[this] = n;\n            }\n        });\n\n        return [ t.thumbSize, t.imageSize, '1280u'];\n\n    },\n\n\n    // parse the result and call the callback with the galleria-ready data array\n\n    _parse: function( data, callback ) {\n\n        var self = this,\n            gallery = [],\n            img;\n\n        $.each( data, function() {\n\n            img = this.media$group.media$thumbnail;\n\n            gallery.push({\n                thumb: img[0].url,\n                image: img[1].url,\n                big: img[2].url,\n                title: this.summary.$t\n            });\n        });\n\n        callback.call( this, gallery );\n    }\n};\n\n\n/**\n    Galleria modifications\n    We fake-extend the load prototype to make Picasa integration as simple as possible\n*/\n\n\n// save the old prototype in a local variable\n\nvar load = Galleria.prototype.load;\n\n\n// fake-extend the load prototype using the picasa data\n\nGalleria.prototype.load = function() {\n\n    // pass if no data is provided or picasa option not found\n    if ( arguments.length || typeof this._options.picasa !== 'string' ) {\n        load.apply( this, Galleria.utils.array( arguments ) );\n        return;\n    }\n\n    // define some local vars\n    var self = this,\n        args = Galleria.utils.array( arguments ),\n        picasa = this._options.picasa.split(':'),\n        p,\n        opts = $.extend({}, self._options.picasaOptions),\n        loader = typeof opts.loader !== 'undefined' ?\n            opts.loader : $('<div>').css({\n                width: 48,\n                height: 48,\n                opacity: 0.7,\n                background:'#000 url('+PATH+'loader.gif) no-repeat 50% 50%'\n            });\n\n    if ( picasa.length ) {\n\n        // validate the method\n        if ( typeof Galleria.Picasa.prototype[ picasa[0] ] !== 'function' ) {\n            Galleria.raise( picasa[0] + ' method not found in Picasa plugin' );\n            return load.apply( this, args );\n        }\n\n        // validate the argument\n        if ( !picasa[1] ) {\n            Galleria.raise( 'No picasa argument found' );\n            return load.apply( this, args );\n        }\n\n        // apply the preloader\n        window.setTimeout(function() {\n            self.$( 'target' ).append( loader );\n        },100);\n\n        // create the instance\n        p = new Galleria.Picasa();\n\n        // apply Flickr options\n        if ( typeof self._options.picasaOptions === 'object' ) {\n            p.setOptions( self._options.picasaOptions );\n        }\n\n        // call the picasa method and trigger the DATA event\n        var arg = [];\n        if ( picasa[0] == 'useralbum' ) {\n            arg = picasa[1].split('/');\n            if (arg.length != 2) {\n                Galleria.raise( 'Picasa useralbum not correctly formatted (should be [user]/[album])');\n                return;\n            }\n        } else {\n            arg.push( picasa[1] );\n        }\n\n        arg.push(function(data) {\n            self._data = data;\n            loader.remove();\n            self.trigger( Galleria.DATA );\n            p.options.complete.call(p, data);\n        });\n\n        p[ picasa[0] ].apply( p, arg );\n\n    } else {\n\n        // if flickr array not found, pass\n        load.apply( this, args );\n    }\n};\n\n}( jQuery ) );"],"sourceRoot":"scripts/"}