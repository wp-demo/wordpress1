{"version":3,"sources":["galleria.flickr.js"],"names":["$","Galleria","requires","PATH","utils","getScriptPath","Flickr","api_key","this","options","max","imageSize","thumbSize","sort","description","complete","backlink","prototype","constructor","search","phrase","callback","_find","text","tags","tag","user","username","_call","method","url","data","user_id","id","set","photoset_id","gallery","gallery_id","groupsearch","group","groups","nsid","group_id","setOptions","extend","params","scope","format","jsoncallback","each","key","value","getJSON","stat","call","raise","code","toString","message","_getBig","photo","url_l","parseInt","width_o","farm","server","secret","url_o","url_z","url_m","_getSize","size","img","url_t","url_s","extras","per_page","Math","min","photos","photoset","len","length","i","push","thumb","image","big","title","_content","link","owner","load","arguments","_options","flickr","apply","array","self","args","split","f","opts","flickrOptions","loader","css","width","height","opacity","background","window","setTimeout","append","_data","remove","trigger","DATA","jQuery"],"mappings":"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","file":"galleria.flickr.js","sourcesContent":["/**\n * Galleria Flickr Plugin 2016-09-03\n * http://galleria.io\n *\n * Copyright (c) 2010 - 2017 worse is better UG\n * Licensed under the MIT license\n * https://raw.github.com/worseisbetter/galleria/master/LICENSE\n *\n */\n\n(function($) {\n\n/*global jQuery, Galleria, window */\n\nGalleria.requires(1.25, 'The Flickr Plugin requires Galleria version 1.2.5 or later.');\n\n// The script path\nvar PATH = Galleria.utils.getScriptPath();\n\n/**\n\n    @class\n    @constructor\n\n    @example var flickr = new Galleria.Flickr();\n\n    @author http://galleria.io\n\n    @requires jQuery\n    @requires Galleria\n\n    @param {String} [api_key] Flickr API key to be used, defaults to the Galleria key\n\n    @returns Instance\n*/\n\nGalleria.Flickr = function( api_key ) {\n\n    this.api_key = api_key || '2a2ce06c15780ebeb0b706650fc890b2';\n\n    this.options = {\n        max: 30,                       // photos to return\n        imageSize: 'medium',           // photo size ( thumb,small,medium,big,original )\n        thumbSize: 'thumb',            // thumbnail size ( thumb,small,medium,big,original )\n        sort: 'interestingness-desc',  // sort option ( date-posted-asc, date-posted-desc, date-taken-asc, date-taken-desc, interestingness-desc, interestingness-asc, relevance )\n        description: false,            // set this to true to get description as caption\n        complete: function(){},        // callback to be called inside the Galleria.prototype.load\n        backlink: false                // set this to true if you want to pass a link back to the original image\n    };\n};\n\nGalleria.Flickr.prototype = {\n\n    // bring back the constructor reference\n\n    constructor: Galleria.Flickr,\n\n    /**\n        Search for anything at Flickr\n\n        @param {String} phrase The string to search for\n        @param {Function} [callback] The callback to be called when the data is ready\n\n        @returns Instance\n    */\n\n    search: function( phrase, callback ) {\n        return this._find({\n            text: phrase\n        }, callback );\n    },\n\n    /**\n        Search for anything at Flickr by tag\n\n        @param {String} tag The tag(s) to search for\n        @param {Function} [callback] The callback to be called when the data is ready\n\n        @returns Instance\n    */\n\n    tags: function( tag, callback ) {\n        return this._find({\n            tags: tag\n        }, callback);\n    },\n\n    /**\n        Get a user's public photos\n\n        @param {String} username The username as shown in the URL to fetch\n        @param {Function} [callback] The callback to be called when the data is ready\n\n        @returns Instance\n    */\n\n    user: function( username, callback ) {\n        return this._call({\n            method: 'flickr.urls.lookupUser',\n            url: 'flickr.com/photos/' + username\n        }, function( data ) {\n            this._find({\n                user_id: data.user.id,\n                method: 'flickr.people.getPublicPhotos'\n            }, callback);\n        });\n    },\n\n    /**\n        Get photos from a photoset by ID\n\n        @param {String|Number} photoset_id The photoset id to fetch\n        @param {Function} [callback] The callback to be called when the data is ready\n\n        @returns Instance\n    */\n\n    set: function( photoset_id, callback ) {\n        return this._find({\n            photoset_id: photoset_id,\n            method: 'flickr.photosets.getPhotos'\n        }, callback);\n    },\n\n    /**\n        Get photos from a gallery by ID\n\n        @param {String|Number} gallery_id The gallery id to fetch\n        @param {Function} [callback] The callback to be called when the data is ready\n\n        @returns Instance\n    */\n\n    gallery: function( gallery_id, callback ) {\n        return this._find({\n            gallery_id: gallery_id,\n            method: 'flickr.galleries.getPhotos'\n        }, callback);\n    },\n\n    /**\n        Search groups and fetch photos from the first group found\n        Useful if you know the exact name of a group and want to show the groups photos.\n\n        @param {String} group The group name to search for\n        @param {Function} [callback] The callback to be called when the data is ready\n\n        @returns Instance\n    */\n\n    groupsearch: function( group, callback ) {\n        return this._call({\n            text: group,\n            method: 'flickr.groups.search'\n        }, function( data ) {\n            this.group( data.groups.group[0].nsid, callback );\n        });\n    },\n\n    /**\n        Get photos from a group by ID\n\n        @param {String} group_id The group id to fetch\n        @param {Function} [callback] The callback to be called when the data is ready\n\n        @returns Instance\n    */\n\n    group: function ( group_id, callback ) {\n        return this._find({\n            group_id: group_id,\n            method: 'flickr.groups.pools.getPhotos'\n        }, callback );\n    },\n\n    /**\n        Set flickr options\n\n        @param {Object} options The options object to blend\n\n        @returns Instance\n    */\n\n    setOptions: function( options ) {\n        $.extend(this.options, options);\n        return this;\n    },\n\n\n    // call Flickr and raise errors\n\n    _call: function( params, callback ) {\n\n        var url = 'https://api.flickr.com/services/rest/?';\n\n        var scope = this;\n\n        params = $.extend({\n            format : 'json',\n            jsoncallback : '?',\n            api_key: this.api_key\n        }, params );\n\n        $.each(params, function( key, value ) {\n            url += '&' + key + '=' + value;\n        });\n\n        $.getJSON(url, function(data) {\n            if ( data.stat === 'ok' ) {\n                callback.call(scope, data);\n            } else {\n                Galleria.raise( data.code.toString() + ' ' + data.stat + ': ' + data.message, true );\n            }\n        });\n        return scope;\n    },\n\n\n    // \"hidden\" way of getting a big image (~1024) from flickr\n\n    _getBig: function( photo ) {\n\n        if ( photo.url_l ) {\n            return photo.url_l;\n        } else if ( parseInt( photo.width_o, 10 ) > 1280 ) {\n\n            return 'https://farm'+photo.farm + '.static.flickr.com/'+photo.server +\n                '/' + photo.id + '_' + photo.secret + '_b.jpg';\n        }\n\n        return photo.url_o || photo.url_z || photo.url_m;\n\n    },\n\n\n    // get image size by option name\n\n    _getSize: function( photo, size ) {\n\n        var img;\n\n        switch(size) {\n\n            case 'thumb':\n                img = photo.url_t;\n                break;\n\n            case 'small':\n                img = photo.url_s;\n                break;\n\n            case 'big':\n                img = this._getBig( photo );\n                break;\n\n            case 'original':\n                img = photo.url_o ? photo.url_o : this._getBig( photo );\n                break;\n\n            default:\n                img = photo.url_z || photo.url_m;\n                break;\n        }\n        return img;\n    },\n\n\n    // ask flickr for photos, parse the result and call the callback with the galleria-ready data array\n\n    _find: function( params, callback ) {\n\n        params = $.extend({\n            method: 'flickr.photos.search',\n            extras: 'url_t,url_m,url_o,url_s,url_l,url_z,description',\n            sort: this.options.sort,\n            per_page: Math.min( this.options.max, 500 )\n        }, params );\n\n        return this._call( params, function(data) {\n\n            var gallery = [],\n                photos = data.photos ? data.photos.photo : data.photoset.photo,\n                len = photos.length,\n                photo,\n                i;\n\n            for ( i=0; i<len; i++ ) {\n\n                photo = photos[i];\n\n                gallery.push({\n                    thumb: this._getSize( photo, this.options.thumbSize ),\n                    image: this._getSize( photo, this.options.imageSize ),\n                    big: this._getBig( photo ),\n                    title: photos[i].title,\n                    description: this.options.description && photos[i].description ? photos[i].description._content : '',\n                    link: this.options.backlink ? 'https://flickr.com/photos/' + photo.owner + '/' + photo.id : ''\n                });\n            }\n            callback.call( this, gallery );\n        });\n    }\n};\n\n\n/**\n    Galleria modifications\n    We fake-extend the load prototype to make Flickr integration as simple as possible\n*/\n\n\n// save the old prototype in a local variable\n\nvar load = Galleria.prototype.load;\n\n\n// fake-extend the load prototype using the flickr data\n\nGalleria.prototype.load = function() {\n\n    // pass if no data is provided or flickr option not found\n    if ( arguments.length || typeof this._options.flickr !== 'string' ) {\n        load.apply( this, Galleria.utils.array( arguments ) );\n        return;\n    }\n\n    // define some local vars\n    var self = this,\n        args = Galleria.utils.array( arguments ),\n        flickr = this._options.flickr.split(':'),\n        f,\n        opts = $.extend({}, self._options.flickrOptions),\n        loader = typeof opts.loader !== 'undefined' ?\n            opts.loader : $('<div>').css({\n                width: 48,\n                height: 48,\n                opacity: 0.7,\n                background:'#000 url('+PATH+'loader.gif) no-repeat 50% 50%'\n            });\n\n    if ( flickr.length ) {\n\n        // validate the method\n        if ( typeof Galleria.Flickr.prototype[ flickr[0] ] !== 'function' ) {\n            Galleria.raise( flickr[0] + ' method not found in Flickr plugin' );\n            return load.apply( this, args );\n        }\n\n        // validate the argument\n        if ( !flickr[1] ) {\n            Galleria.raise( 'No flickr argument found' );\n            return load.apply( this, args );\n        }\n\n        // apply the preloader\n        window.setTimeout(function() {\n            self.$( 'target' ).append( loader );\n        },100);\n\n        // create the instance\n        f = new Galleria.Flickr();\n\n        // apply Flickr options\n        if ( typeof self._options.flickrOptions === 'object' ) {\n            f.setOptions( self._options.flickrOptions );\n        }\n\n        // call the flickr method and trigger the DATA event\n        f[ flickr[0] ]( flickr[1], function( data ) {\n\n            self._data = data;\n            loader.remove();\n            self.trigger( Galleria.DATA );\n            f.options.complete.call(f, data);\n\n        });\n    } else {\n\n        // if flickr array not found, pass\n        load.apply( this, args );\n    }\n};\n\n}( jQuery ) );"],"sourceRoot":"scripts/"}